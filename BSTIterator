/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
    TreeNode *bst; 
    stack<TreeNode *> path;
    
    void traverse_path (TreeNode *root) {
        TreeNode *next_item = root;

        while (next_item != nullptr) {
            path.push(next_item);
            next_item = next_item->left;

        }
    }
    
public:
    BSTIterator(TreeNode* root) {
        bst = root;
        traverse_path (root);

    }
    
    int next() {

        TreeNode *next_item = path.top();

        path.pop();
        if (next_item->right != nullptr) {
            traverse_path(next_item->right);

        }
        return next_item->val;
    }
    
    bool hasNext() {
        return !path.empty();
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
